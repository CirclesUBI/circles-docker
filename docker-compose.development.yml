version: '3'

services:
  relayer-service: &relayer-service
    environment:
      - GRAPH_NODE_EXTERNAL=http://graph:8000
    depends_on:
      - db
      - redis
      - ganache

  relayer-worker: &relayer-worker
    <<: *relayer-service
    depends_on:
      - db
      - ganache
      - redis
      - relayer-service

  relayer-scheduler:
    <<: *relayer-worker

  ganache:
    image: trufflesuite/ganache-cli:latest
    container_name: circles-ganache
    restart: unless-stopped
    ports:
      - "8545:8545"
    command: [
      "--deterministic",
      "--networkId", "5777",
      "--hostname", "0.0.0.0",
      "--accounts", "10",
      "--defaultBalanceEther", "10000",
      "--gasLimit", "10000000",
      "--noVMErrorsOnRPCResponse"
    ]

  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    container_name: circles-ipfs-node
    restart: unless-stopped
    ports:
      - "5001:5001"
    volumes:
      - ipfs:/data/ipfs

  api:
    environment:
      - GRAPH_NODE_ENDPOINT=http://graph:8000

  graph:
    image: graphprotocol/graph-node:v0.18.0
    container_name: circles-graph-node
    restart: unless-stopped
    depends_on:
      - db
      - ipfs
      - ganache
    ports:
      - "8001:8001"
      - "8020:8020"
      - "8030:8030"
      - "8040:8040"
    environment:
      - VIRTUAL_HOST=${HOST_GRAPH_NODE}
      - VIRTUAL_PORT=8000
      - ETHEREUM_POLLING_INTERVAL=25000
      - ethereum=${SUBGRAPH_NETWORK}:${ETHEREUM_NODE_ENDPOINT}
      - ipfs=ipfs:5001
      - postgres_db=${POSTGRES_DATABASE_GRAPH_NODE}
      - postgres_host=db:5432
      - postgres_pass=${POSTGRES_PASSWORD}
      - postgres_user=${POSTGRES_USER}
