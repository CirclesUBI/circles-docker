version: '3'

volumes:
  conf:
  data:
  html:
  ipfs:
  relayer:
  relayer_html:
  vhost.d:

services:
  db:
    image: postgres:12.2-alpine
    container_name: circles-db
    env_file:
      - .env
    volumes:
      - ./db/init-dbs.sh:/docker-entrypoint-initdb.d/init-dbs.sh
      - data:/var/lib/postgresql/data

  redis:
    image: redis:6.0.1-alpine
    container_name: circles-redis

  ganache:
    image: trufflesuite/ganache-cli:latest
    container_name: circles-ganache
    ports:
      - "8545:8545"
    command: [
      "--deterministic",
      "--networkId", "5777",
      "--hostname", "0.0.0.0",
      "--accounts", "10",
      "--defaultBalanceEther", "10000",
      "--gasLimit", "10000000",
      "--noVMErrorsOnRPCResponse"
    ]

  nginx:
    image: nginx:1.19.1-alpine
    container_name: circles-nginx-proxy
    depends_on:
      - db
    ports:
      - "80:80"
    volumes:
      - conf:/etc/nginx/conf.d
      - html:/usr/share/nginx/html
      - vhost.d:/etc/nginx/vhost.d
      - relayer_html:/usr/share/nginx/html/relayer
      - ./api/nginx.conf:/etc/nginx/vhost.d/${HOST_API}
      - ./relayer/nginx.conf:/etc/nginx/vhost.d/${HOST_RELAYER}

  gen:
    image: jwilder/docker-gen:0.7.0
    container_name: circles-nginx-gen
    depends_on:
      - nginx
    volumes:
      - conf:/etc/nginx/conf.d
      - html:/usr/share/nginx/html
      - vhost.d:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx-proxy/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
    command: -notify-sighup circles-nginx-proxy -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf

  relayer-service: &relayer-service
    build:
      context: https://github.com/CirclesUBI/safe-relay-service.git#v4.1.0
    container_name: circles-relayer-service
    depends_on:
      - db
      - ganache
      - redis
    working_dir: /safe-relay-service
    env_file:
      - .env
    environment:
      - VIRTUAL_HOST=${HOST_RELAYER}
      - GRAPH_NODE_EXTERNAL=http://graph:8000
      - RELAYER_REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - C_FORCE_ROOT=true
      - DJANGO_SECRET_KEY=development
      - DJANGO_SETTINGS_MODULE=config.settings.development
    volumes:
      - relayer:/nginx
      - relayer_html:/usr/share/nginx/html/relayer
    command: ./run.sh

  relayer-worker: &relayer-worker
    <<: *relayer-service
    container_name: circles-relayer-worker
    depends_on:
      - db
      - ganache
      - redis
      - relayer-service
    command: ./run-worker.sh

  relayer-scheduler:
    <<: *relayer-worker
    container_name: circles-relayer-scheduler
    command: ./run-scheduler.sh

  api: &api
    build:
      context: https://github.com/CirclesUBI/circles-api.git#v1.1.13
    container_name: circles-api
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - VIRTUAL_HOST=${HOST_API}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - API_SERVICE_ENDPOINT=http://api:3000
      - GRAPH_NODE_ENDPOINT=http://graph:8000
      - RELAY_SERVICE_ENDPOINT=http://relayer-service:8888
    command: "./run.sh"

  api-worker:
    <<: *api
    container_name: circles-api-worker
    depends_on:
      - db
      - api
      - graph
    command: "./run-worker.sh"

  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    container_name: circles-ipfs-node
    ports:
      - "5001:5001"
    volumes:
      - ipfs:/data/ipfs

  graph:
    image: graphprotocol/graph-node:v0.19.2
    container_name: circles-graph-node
    depends_on:
      - db
      - ipfs
    ports:
      - "8020:8020"
    environment:
      - VIRTUAL_HOST=${HOST_GRAPH_NODE}
      - VIRTUAL_PORT=8000
      - ethereum=${SUBGRAPH_NETWORK}:${ETHEREUM_NODE_ENDPOINT}
      - ipfs=ipfs:5001
      - postgres_db=${POSTGRES_DATABASE_GRAPH_NODE}
      - postgres_host=db:5432
      - postgres_pass=${POSTGRES_PASSWORD}
      - postgres_user=${POSTGRES_USER}
