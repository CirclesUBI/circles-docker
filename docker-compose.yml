version: '3'

volumes:
  certs:
  conf:
  html:
  ipfs:
  relayer:
  relayer_html:
  vhost.d:

services:
  db:
    image: postgres:11.5-alpine
    container_name: circles-db
    env_file:
      - .env
    volumes:
      - ./db/init-dbs.sh:/docker-entrypoint-initdb.d/init-dbs.sh

  redis:
    image: redis:5.0.5-alpine
    container_name: circles-redis
    env_file:
      - .env

  nginx:
    image: nginx:alpine
    container_name: circles-nginx-proxy
    ports:
      - "80:80"
    volumes:
      - certs:/etc/nginx/certs
      - conf:/etc/nginx/conf.d
      - html:/usr/share/nginx/html
      - vhost.d:/etc/nginx/vhost.d
      - relayer_html:/usr/share/nginx/html/relayer
      - ./relayer/nginx.conf:/etc/nginx/vhost.d/${HOST_RELAYER}
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true"

  gen:
    image: jwilder/docker-gen
    container_name: circles-nginx-gen
    depends_on:
      - nginx
    volumes:
      - certs:/etc/nginx/certs
      - conf:/etc/nginx/conf.d
      - html:/usr/share/nginx/html
      - vhost.d:/etc/nginx/vhost.d
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./nginx-proxy/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
    command: -notify-sighup circles-nginx-proxy -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf

  relayer-service:
    build: relayer
    container_name: circles-relayer-service
    depends_on:
      - db
      - redis
    working_dir: /safe-relay-service
    env_file:
      - .env
    environment:
      - DEPLOY_MASTER_COPY_ON_INIT=0
      - DEPLOY_PROXY_FACTORY_ON_INIT=0
      - VIRTUAL_HOST=${HOST_RELAYER}
      - LETSENCRYPT_HOST=${HOST_RELAYER}
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}
    volumes:
      - relayer:/nginx
      - relayer_html:/usr/share/nginx/html/relayer
    command: ./run.sh

  relayer-worker: &relayer-worker
    build: relayer
    container_name: circles-relayer-worker
    env_file:
      - .env
    depends_on:
      - db
      - redis
      - relayer-service
    command: ./run-worker.sh

  relayer-scheduler:
    <<: *relayer-worker
    container_name: circles-relayer-scheduler
    command: ./run-scheduler.sh

  username-service:
    build: username-service
    container_name: circles-username-service
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - VIRTUAL_HOST=${HOST_USERNAME_SERVICE}
      - LETSENCRYPT_HOST=${HOST_USERNAME_SERVICE}
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}

  ipfs:
    image: ipfs/go-ipfs
    container_name: circles-ipfs-node
    ports:
      - "5001:5001"
    volumes:
      - ipfs:/data/ipfs

  graph:
    image: graphprotocol/graph-node:v0.15.1
    container_name: circles-graph-node
    depends_on:
      - db
      - ipfs
    ports:
      - "8001:8001"
      - "8020:8020"
      - "8030:8030"
      - "8040:8040"
    environment:
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}
      - LETSENCRYPT_HOST=${HOST_GRAPH_NODE}
      - VIRTUAL_HOST=${HOST_GRAPH_NODE}
      - VIRTUAL_PORT=8000
      - ethereum=${SUBGRAPH_NETWORK}:${ETHEREUM_NODE_ENDPOINT}
      - ipfs=ipfs:5001
      - postgres_db=${POSTGRES_DATABASE_GRAPH_NODE}
      - postgres_host=db:5432
      - postgres_pass=${POSTGRES_PASSWORD}
      - postgres_user=${POSTGRES_USER}

  app:
    build: app
    container_name: circles-app
    env_file:
      - .env
    environment:
      - VIRTUAL_HOST=${HOST_APP}
      - LETSENCRYPT_HOST=${HOST_APP}
      - LETSENCRYPT_EMAIL=${SSL_EMAIL}
